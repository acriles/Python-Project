import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QMessageBox
from PyQt6.QtGui import QIcon,QColor
from functools import partial
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QRect, Qt,QSettings, QStandardPaths,QPoint
from PyQt6.QtGui import QPainter

# A classe Config é a janela principal da aplicação.
class Config(object):

    # O método Tela_configuracao tem a função de criar uma tela.
    # É um método de interface gráfica. Este método cria frames, labels e botões, e conecta esses widgets às suas respectivas funções.
    def Tela_configuracao(self, Form: None,dados:None)-> None:
        '''

        :param Form: Tela
        :param dados: Instância da tela onde a configuração for chamdada
        :return: Não retorna nada
        '''
        self.dados = dados
        super().__init__()

        self.settings = QSettings("Estoque", "Lui")
        script_directory = QStandardPaths.writableLocation(QStandardPaths.StandardLocation.AppDataLocation)
        config_file_path = f"{script_directory}/config.ini"
        self.settings = QSettings(config_file_path, QSettings.Format.IniFormat)

        self.frame = QtWidgets.QFrame(parent=Form)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setGeometry(QtCore.QRect(400, 50, 543, 600))
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.dados.janela_config = self.frame
        self.Titulo = QtWidgets.QLabel('Configurações',parent=self.frame)
        self.Titulo.setGeometry(QtCore.QRect(90, 15, 261, 38))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.Titulo.setFont(font)

        fechar_frame = QtWidgets.QPushButton('Fechar', self.frame)
        fechar_frame.clicked.connect(self.fechar_frame)
        fechar_frame.setGeometry(QtCore.QRect(430, 5, 110, 30))
        fechar_frame.show()
        fechar_frame.setStyleSheet("QPushButton {\n"
                                          "                    border: 1px solid black ;\n"
                                          "                    border-radius: 10px;\n"
                                          "                    background-color: (131, 131, 131);\n"
                                          "                    color:black;\n"
                                          "                }\n"
                                          "\n"
                                          "                QPushButton:hover {\n"
                                          "                    background-color: #DDDDDD;  /* Change this to your desired hover color */\n"
                                          "                    color: rgb(0, 0, 0);\n"
                                          "                }\n"
                                          "\n"
                                          "                QPushButton:pressed {\n"
                                          "                    background-color: white;  /* Change this to your desired pressed color */\n"
                                          "                    color: black;\n"
                                          "                }")

        icon = QIcon('configuracao.ico')
        pixmap = icon.pixmap(50, 50)
        self.icone = QtWidgets.QLabel(parent=self.frame)
        self.icone.setPixmap(pixmap)
        self.icone.setGeometry(QtCore.QRect(3, 3, 50, 50))
        self.icone.show()

        self.frame.setCursor(Qt.CursorShape.OpenHandCursor)
        self.frame.mousePressEvent = lambda event, frame=self.frame: self.mousePressEvent_2(event,frame)
        self.frame.mouseReleaseEvent = lambda event, frame=self.frame: self.mouseReleaseEvent_2(event, frame)
        self.frame.mouseMoveEvent = lambda event, frame=self.frame: self.mouseMoveEvent_2(event,frame)

        self.frame_6 = QtWidgets.QFrame(parent=self.frame)
        self.frame_6.setGeometry(QtCore.QRect(20, 60, 481, 161))
        self.frame_6.setStyleSheet("border: 2px solid #2E3D48;\n"
"                                border-radius: 10px;\n"
"")
        self.frame_6.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_6.setObjectName("frame_6")
        self.label = QtWidgets.QLabel(parent=self.frame_6)
        self.label.setGeometry(QtCore.QRect(10, 10, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("border : none;")
        self.label.setObjectName("label")
        self.fontComboBox = QtWidgets.QFontComboBox(parent=self.frame_6)
        self.fontComboBox.setGeometry(QtCore.QRect(10, 40, 187, 22))
        self.fontComboBox.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.fontComboBox.setObjectName("fontComboBox")

        self.fontComboBox.currentFontChanged.connect(self.change_font)

        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(parent=self.frame_6)
        self.doubleSpinBox.setGeometry(QtCore.QRect(270, 30, 91, 41))
        self.doubleSpinBox.setStyleSheet("border: 2px solid #2E3D48;\n"
"                                border-radius: 10px;")
        self.doubleSpinBox.setProperty("value", 12.0)
        self.doubleSpinBox.setObjectName("doubleSpinBox")

        self.doubleSpinBox.valueChanged.connect(self.change_font)

        self.label_7 = QtWidgets.QLabel(parent=self.frame_6)
        self.label_7.setGeometry(QtCore.QRect(270, 10, 191, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("border : none;")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(parent=self.frame_6)
        self.label_8.setGeometry(QtCore.QRect(10, 90, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("border : none;")
        self.label_8.setObjectName("label_8")

        self.btn_confirma = QtWidgets.QPushButton(parent=self.frame)
        self.btn_confirma.setGeometry(QtCore.QRect(330, 540, 81, 31))
        self.btn_confirma.setStyleSheet("border: 2px solid #2E3D48;\n"
"                                border-radius: 10px;\n"
"                                background-color: #FFFFFF;\n"
"                                color: #2E3D48;")

        self.btn_confirma.setObjectName("pushButton")
        self.btn_confirma.clicked.connect(lambda: self.save_(Form))

        self.btn_padrao = QtWidgets.QPushButton(parent=self.frame)
        self.btn_padrao.setGeometry(QtCore.QRect(430, 540, 71, 31))
        self.btn_padrao.setStyleSheet("""
            QPushButton {
                border: 2px solid #2E3D48;
                border-radius: 10px;
                background-color: #FFFFFF;
                color: #2E3D48;
            }
            QPushButton:pressed {
                background-color: #2E3D48;
                color: #FFFFFF;
            }""")
        self.btn_padrao.setObjectName("btn_padrao")
        self.btn_padrao.clicked.connect(lambda: self.retornar_padrao(Form))

        self.frame_2 = QtWidgets.QFrame(parent=self.frame)
        self.frame_2.setGeometry(QtCore.QRect(20, 240, 481, 271))
        self.frame_2.setStyleSheet("border: 2px solid #2E3D48;\n"
"                                border-radius: 10px;\n"
"")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_2 = QtWidgets.QLabel(parent=self.frame_2)
        self.label_2.setGeometry(QtCore.QRect(18, 6, 61, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("border: none;")
        self.label_2.setObjectName("label_2")
        self.pushButton_10 = QtWidgets.QPushButton(parent=self.frame_2)
        self.pushButton_10.setGeometry(QtCore.QRect(20, 170, 121, 81))
        self.pushButton_10.setStyleSheet("border: 2px solid #2E3D48;\n"
                                         "background-color: rgb(192, 192, 192);\n")

        self.pushButton_10.setText("")
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(parent=self.frame_2)
        self.pushButton_11.setGeometry(QtCore.QRect(180, 170, 121, 81))
        self.pushButton_11.setStyleSheet("border: 2px solid #2E3D48;\n"
"background-color: rgb(0, 255, 127);\n"
"")
        self.pushButton_11.setText("")
        self.pushButton_11.setObjectName("pushButton_11")

        self.pushButton_12 = QtWidgets.QPushButton(parent=self.frame_2)
        self.pushButton_12.setGeometry(QtCore.QRect(180, 50, 121, 81))
        self.pushButton_12.setStyleSheet("border: 2px solid #2E3D48;\n"
"background-color: rgb(250, 255, 250);\n"
"")
        self.pushButton_12.setText("")
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_13 = QtWidgets.QPushButton(parent=self.frame_2)
        self.pushButton_13.setGeometry(QtCore.QRect(20, 50, 121, 81))
        self.pushButton_13.setStyleSheet("border: 2px solid #2E3D48;\n"
                                         "background-color:#5DADE2"
"\n"
"")
        self.pushButton_13.setText("")
        self.pushButton_13.setObjectName("pushButton_13")


        self.black_radio = QtWidgets.QRadioButton(parent=self.frame_2)
        self.black_radio.setGeometry(QtCore.QRect(40, 200, 91, 21))
        self.black_radio.setStyleSheet("border: none;\n"
"background-color: rgb(192, 192, 192);\n"
"                color: white;")
        self.black_radio.setObjectName("black_radio")
        self.green_radio = QtWidgets.QRadioButton(parent=self.frame_2)
        self.green_radio.setGeometry(QtCore.QRect(200, 200, 82, 17))
        self.green_radio.setStyleSheet("border: none;\n"
"background-color: rgb(0, 255, 127);\n"
"                color: black;")
        self.green_radio.setObjectName("green_radio")
        self.blue_radio = QtWidgets.QRadioButton(parent=self.frame_2)
        self.blue_radio.setGeometry(QtCore.QRect(30, 80, 82, 17))
        self.blue_radio.setStyleSheet("border: none;\n"
"background-color: #5DADE2;\n"
"                color: BLACK;")
        self.blue_radio.setObjectName("blue_radio")
        self.white_radio = QtWidgets.QRadioButton(parent=self.frame_2)
        self.white_radio.setGeometry(QtCore.QRect(200, 80, 82, 17))
        self.white_radio.setStyleSheet("border: none;\n"
"background-color: white;\n"
"                color: BLACK;")
        self.white_radio.setObjectName("white_radio")
        self.original_styles = {
            self.black_radio: self.black_radio.styleSheet(),
            self.white_radio: self.white_radio.styleSheet(),
            self.green_radio: self.green_radio.styleSheet(),
            self.blue_radio: self.blue_radio.styleSheet(),
        }
        self.black_radio.clicked.connect(self.change_color)
        self.white_radio.clicked.connect(self.change_color)
        self.green_radio.clicked.connect(self.change_color)
        self.blue_radio.clicked.connect(self.change_color)

        self.pushButton_11.clicked.connect(partial(self.set_radio_and_change_color, self.green_radio))
        self.pushButton_10.clicked.connect(partial(self.set_radio_and_change_color, self.black_radio))
        self.pushButton_13.clicked.connect(partial(self.set_radio_and_change_color, self.blue_radio))
        self.pushButton_12.clicked.connect(partial(self.set_radio_and_change_color, self.white_radio))

        if self.pushButton_13.isHidden():
            self.blue_radio.setChecked(True)


        self.pushButton_12.raise_()
        self.label_2.raise_()
        self.pushButton_10.raise_()
        self.pushButton_11.raise_()
        self.pushButton_13.raise_()
        self.black_radio.raise_()
        self.green_radio.raise_()
        self.blue_radio.raise_()
        self.white_radio.raise_()
        self.load(Form)
        self.Definir_Nomes(Form)
        self.draggable = False
        self.offset = QPoint()
        for widget in self.frame.findChildren(QtWidgets.QWidget):
            widget.show()
        self.frame.show()

    # Método fecharJanela usado para fechar a tela de configurações quando clicado fora da tela.

    def fecharJanela(self, Form:None) -> None:
        '''

        :param Form: Tela
        :return: Não retorna nada
        '''
        Form.close()

    # Esse método Definir_Nomes tem a função gráfica de definir os nomes de alguns labels e botões fixos.
    # Ou seja, que não mudam os nomes.
    def Definir_Nomes(self, Form:None) -> None:
        '''

        :param Form: Tela
        :return: Não retorna nada
        '''
        _translate = QtCore.QCoreApplication.translate
        self.label.setText(_translate("Form", "FONTE :"))
        self.label_7.setText(_translate("Form", "TAMANHO DA FONTE: "))
        self.label_8.setText(_translate("Form", "COR :"))
        self.btn_confirma.setText(_translate("Form", "CONCLUÍDO"))
        self.btn_padrao.setText(_translate("Form", "PADRÃO"))
        self.label_2.setText(_translate("Form", "TEMA :"))
        self.black_radio.setText(_translate("Form", "BLACK"))
        self.green_radio.setText(_translate("Form", "VERDE"))
        self.blue_radio.setText(_translate("Form", "PADRÃO"))
        self.white_radio.setText(_translate("Form", "CLARO"))

    # Método createButton é usado para criar um botão que representa as cores da aplicação e retorna-lo.
    def createButton(self, color:str, x_position:int) -> QtWidgets.QPushButton:
        '''

        :param color: Cor do botão
        :param x_position: posicao no eixo x onde ficará o botão
        :return: Retorna um botão
        '''
        button = QtWidgets.QPushButton("", self.frame_6)
        button.setGeometry(QRect(30 + x_position, 120, 21, 21))
        cor = 'white'
        if color!= "black":
            cor = "black"
        button.setStyleSheet(f"background-color: {color};\n"
                              "border: none;"
                             f"color: {cor};")
        if self.color == color:
            button.setText("✔")

        button.setCheckable(True)
        button.clicked.connect(lambda: self.mudar_layout(button, color))

        return button

    # O método mudar_layout altera o layout da aplicação para a cor especificada ao clicar em um botão de cor.
    def mudar_layout(self, clicked_button:None, color:str) -> None:
        '''

        :param clicked_button: Botão do layout que foi escolhido
        :param color: Cor do layout
        :return: Não retorna nada
        '''
        self.color = color
        buttons = [child for child in self.frame_6.children() if isinstance(child, QtWidgets.QPushButton)]

        for button in buttons:
            if button != clicked_button:
                button.setChecked(False)
                button.setText("")

        if clicked_button.isChecked():
            if color == "black":
                clicked_button.setStyleSheet("background-color: black;\n"
                                             "border: none;\n"
                                             "color: white;")
                self.frame.setStyleSheet(f'background-color: {self.backcolocor};'
                                         f'color: {self.color};'
                                         f'font: {self.font};')
                for label in self.frame.findChildren(QtWidgets.QLabel):
                    label.setStyleSheet(f'color: {self.color}; font:  12px ; border:none')
            else:
                clicked_button.setStyleSheet(f"background-color: {color};\n"
                                             "border: none;"
                                             "color: black;")
                for label in self.frame.findChildren(QtWidgets.QLabel):
                    label.setStyleSheet(f'color: {self.color}; font:  12px ; border:none')
                self.frame.setStyleSheet(f'background-color: {self.backcolocor};'
                                         f'color: {self.color};'
                                         f'font: {self.font};')

            clicked_button.setText("✔")
        else:
            clicked_button.setStyleSheet(f"background-color: {self.backcolocor};\n"
                                         "border: none;")
            clicked_button.setText("")

    # Método change_color muda cor das labels e Botões da aplicação.
    def change_color(self) -> None:
        '''

        :return: Não retorna nada
        '''
        color = None

        if self.black_radio.isChecked():
            color = QColor(192, 192, 192)

        elif self.white_radio.isChecked():
            color = QColor(255, 255, 255)
        elif self.green_radio.isChecked():
            color = QColor(144, 238, 144)
        elif self.blue_radio.isChecked():
            color = QColor(93, 173, 226)

        if color:
            self.backcolocor = color.name()
            self.frame.setStyleSheet(f'background-color: {color.name()};'
                                     f'color: {self.color};'
                                     f'font: {self.font};'
                                     f'border: 2px solid #2E3D48;'
                                     f'border-radius: 10px;')
            self.dados.frame.setStyleSheet(f'background-color: {color.name()};'
                                     f'color: {self.color};'
                                     f'font: {self.font};')
    # Método change_font muda fonte das labels e Botões da aplicação.
    def change_font(self) -> None:
        '''

        :return: Não retorna nada
        '''
        tamanho = int(self.doubleSpinBox.value())
        self.font = self.fontComboBox.currentFont().family()
        for label in self.frame.findChildren(QtWidgets.QLabel):
            label.setStyleSheet(f'color: {self.color}; font:  {tamanho}px {self.font}; border:none')
        for radio_button, original_style in self.original_styles.items():
            radio_button.setStyleSheet(f'{original_style} color: none; font:  {tamanho}px {self.font};')

    # Método set_radio_and_change_color ativa o radio_button especifico e chama a função change_color
    def set_radio_and_change_color(self, radio_button:None)-> None:
        '''

        :param radio_button:  radio button que ativou a função
        :return: Não retorna nada
        '''
        radio_button.setChecked(True)
        self.change_color()

    # Método retornar_padrao retorna as cores a cor padrão do software.
    def retornar_padrao(self,Form:None)-> None:
        '''

        :param Form: Tela
        :return: Não retorna nada
        '''
        self.white_radio.setChecked(True)
        #self.clicked_button.setText("✔")
        self.doubleSpinBox.setProperty("value", 12.0)

        self.frame.setStyleSheet("background-color: White;"
                                 "border: 2px solid #2E3D48;"
                                 "border-radius: 10px;")
        self.dados.frame.setStyleSheet("background-color: White;")
        self.frame_6.setStyleSheet("border: 2px solid #2E3D48;\n"
                                   "          border-radius: 10px;\n")
        for label in self.frame.findChildren(QtWidgets.QLabel):
            label.setStyleSheet(f'color: black; font:  12px ; border:none')
        for radio_button, original_style in self.original_styles.items():
            radio_button.setStyleSheet(f'{original_style} color: none; font:  12px;')
        buttons = [child for child in self.frame_6.children() if isinstance(child, QtWidgets.QPushButton)]

        for button in buttons:
            background_color = button.palette().color(button.backgroundRole())
            if background_color == QtGui.QColor("black"):
                button.setText("✔")
            else:
                button.setText('')
        color = QColor(255, 255, 255)
        self.color = "black"
        self.backcolocor = color.name()
        self.font = self.fontComboBox.currentFont().family()

    # Método save_ Salva as alterações.
    def save_(self,Form:None)-> None:
        '''

        :param Form: Tela
        :return: Não retorna nada
        '''
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Icon.Information)
        msg_box.setWindowTitle("AVISO")
        msg_box.setText("Confirmar?")
        icon = QIcon('warning.ico')  # Substitua pelo caminho real para o seu arquivo de ícone
        msg_box.setWindowIcon(icon)
        msg_box.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        reply = msg_box.exec()
        if reply == QMessageBox.StandardButton.Yes:

            tamanho = int(self.doubleSpinBox.value())
            self.font = self.fontComboBox.currentFont().family()

            self.settings.setValue("tema", self.backcolocor)
            self.settings.setValue("color", self.color)
            self.settings.setValue("font", self.font)
            self.settings.setValue("tamanho", tamanho)
            self.dados.conf_layout()
            self.dados.config_Aberta = False
            self.frame.close()

        else:
            self.load(Form)

    # O método load carrega as configurações salvas de um arquivo ou banco de dados e aplica essas configurações ao layout.
    # Se não houver informações salvas, utiliza os valores padrão.
    def load(self, Form:None) -> None:
        '''

        :param Form: Tela
        :return: Não retorna nada
        '''
        if self.settings.contains("tema"):
            font_name = self.settings.value("font", defaultValue="")
            backcolocor = self.settings.value("tema", defaultValue="")
            color = self.settings.value("color", defaultValue="")
            tamanho = int(self.settings.value("tamanho", defaultValue=10))
            self.backcolocor = backcolocor
            self.color = color

            self.doubleSpinBox.setValue(tamanho)

            self.frame.setStyleSheet(f'background-color: {backcolocor};'
                                     f'color: {color};'
                                     f'font: {font_name} {tamanho}px;'
                                     f'border: 2px solid #2E3D48;'
                                     f'border-radius: 10px;')
            for label in self.frame.findChildren(QtWidgets.QLabel):
                if label == self.Titulo:
                    label.setStyleSheet(f'color: {color}; font:  30px {font_name}; border:none')
                else:
                    label.setStyleSheet(f'color: {color}; font:  {tamanho}px {font_name}; border:none')
            for radio_button, original_style in self.original_styles.items():


                radio_button.setStyleSheet(f'{original_style} color: none; font:  {tamanho}px {font_name};')
            self.font = font_name

        if not self.settings.contains("tema"):
            self.retornar_padrao(Form)
        button_colors = ["black", "pink", "orange", "yellow", "green"]
        for i, color in enumerate(button_colors):
            button = self.createButton(color, i * 50)

        if self.backcolocor == (QColor(192, 192, 192)).name():
            self.black_radio.setChecked(True)
        if self.backcolocor == (QColor(255, 255, 255)).name():
            self.white_radio.setChecked(True)
        if self.backcolocor == (QColor(144, 238, 144)).name():
            self.green_radio.setChecked(True)
        if self.backcolocor == (QColor(93, 173, 226)).name():
            self.blue_radio.setChecked(True)

    def paintEvent(self, event:None)-> None:
        '''

        :param event: A função é chamdad quando o certo evento acontece
        :return: Não retorna nada
        '''
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        painter.fillRect(self.rect(), Qt.GlobalColor.transparent)

    # Métodos mousePressEvent, mouseMoveEvent, mouseReleaseEvent, mousePressEvent_2, mouseMoveEvent_2 e mouseReleaseEvent_2
    # Usados para movimentar a tela de configurações.
    def mousePressEvent(self, event:None)-> None:
        '''

        :param event: A função é chamdad quando o certo evento acontece
        :return: Não retorna nada
        '''
        # Verifica se o clique do mouse ocorre dentro da barra de título (pode ser adaptado conforme necessário)
        if event.button() == Qt.MouseButton.LeftButton and event.y() < 30:
            self.draggable = True
            self.offset = event.pos()

    def mouseMoveEvent(self, event:None)-> None:
        '''

        :param event: A função é chamdad quando o certo evento acontece
        :return: Não retorna nada
        '''
        # Atualiza a posição da janela enquanto arrasta
        if self.draggable:
            self.move(self.pos() + event.pos() - self.offset)

    def mouseReleaseEvent(self, event:None)-> None:
        # Seta draggable para False quando o botão do mouse é liberado
        if event.button() == Qt.MouseButton.LeftButton:
            self.draggable = False
    def mousePressEvent_2(self, event:None, centralwidget:None)-> None:
        '''

        :param event: A função é chamdad quando o certo evento acontece
        :param centralwidget: Frame
        :return: Não retorna nada
        '''
        if event.button() == Qt.MouseButton.LeftButton:
            centralwidget.setCursor(Qt.CursorShape.ClosedHandCursor)
        centralwidget.mouse_offset = event.pos()
    def mouseReleaseEvent_2(self, event:None,centralwidget:None)-> None:
        '''

        :param event: A função é chamdad quando o certo evento acontece
        :param centralwidget: Frame
        :return: Não retorna nada
        '''
        if event.button() == Qt.MouseButton.LeftButton:
            centralwidget.setCursor(Qt.CursorShape.OpenHandCursor)
    def mouseMoveEvent_2(self, event:None, centralwidget:None)-> None:
        '''

        :param event: A função é chamdad quando o certo evento acontece
        :param centralwidget: Frame
        :return: Não retorna nada
        '''
        if event.buttons() == Qt.MouseButton.LeftButton:
            new_pos = centralwidget.mapToParent(event.pos() - centralwidget.mouse_offset)
            centralwidget.move(new_pos)
            x, y = new_pos.x(), new_pos.y()
    # Esse método fechar_frame fecha a tela de configurações
    def fechar_frame(self)->None:
        '''

        :return: Não retorna nada
        '''
        self.frame.close()
